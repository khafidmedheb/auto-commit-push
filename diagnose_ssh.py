#!/usr/bin/env python3
import subprocess
import os
from pathlib import Path

def run_cmd(cmd):
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except:
        return False, "", "Commande √©chou√©e"

def diagnose_ssh():
    print("üîç DIAGNOSTIC SSH GITHUB\n" + "="*50)
    
    # 1. V√©rifier les cl√©s SSH
    print("1Ô∏è‚É£ V√©rification des cl√©s SSH...")
    ssh_dir = Path.home() / ".ssh"
    
    if not ssh_dir.exists():
        print("‚ùå Dossier ~/.ssh inexistant")
        return False
    
    keys = list(ssh_dir.glob("id_*"))
    public_keys = [k for k in keys if k.suffix == ".pub"]
    
    if not public_keys:
        print("‚ùå Aucune cl√© SSH trouv√©e")
        return False
    
    print(f"‚úÖ Cl√©s trouv√©es : {[k.name for k in public_keys]}")
    
    # 2. Test de connexion GitHub
    print("\n2Ô∏è‚É£ Test de connexion GitHub...")
    success, stdout, stderr = run_cmd("ssh -T git@github.com")
    
    if "successfully authenticated" in stdout:
        print("‚úÖ Connexion SSH GitHub r√©ussie")
        username = stdout.split("Hi ")[1].split("!")[0] if "Hi " in stdout else "inconnu"
        print(f"üë§ Utilisateur connect√© : {username}")
    else:
        print("‚ùå √âchec de connexion SSH")
        print(f"Erreur : {stderr}")
        return False
    
    # 3. V√©rifier la configuration Git
    print("\n3Ô∏è‚É£ Configuration Git...")
    success, stdout, stderr = run_cmd("git config --global user.name")
    if success and stdout:
        print(f"‚úÖ Nom utilisateur : {stdout}")
    else:
        print("‚ö†Ô∏è Nom utilisateur Git non configur√©")
    
    success, stdout, stderr = run_cmd("git config --global user.email")
    if success and stdout:
        print(f"‚úÖ Email : {stdout}")
    else:
        print("‚ö†Ô∏è Email Git non configur√©")
    
    # 4. V√©rifier le remote
    print("\n4Ô∏è‚É£ Configuration du remote...")
    success, stdout, stderr = run_cmd("git remote -v")
    if success and stdout:
        print(f"‚úÖ Remotes configur√©s :\n{stdout}")
    else:
        print("‚ö†Ô∏è Aucun remote configur√©")
    
    # 5. V√©rifier le statut Git
    print("\n5Ô∏è‚É£ Statut du d√©p√¥t...")
    success, stdout, stderr = run_cmd("git status --porcelain")
    if success:
        if stdout:
            print(f"üìù Changements d√©tect√©s :\n{stdout}")
        else:
            print("‚úÖ D√©p√¥t propre")
    
    return True

def fix_common_issues():
    print("\nüîß CORRECTIONS AUTOMATIQUES\n" + "="*50)
    
    # Configurer Git si n√©cessaire
    success, stdout, stderr = run_cmd("git config --global user.name")
    if not success or not stdout:
        print("üîß Configuration du nom utilisateur...")
        run_cmd('git config --global user.name "khafidmedheb"')
    
    success, stdout, stderr = run_cmd("git config --global user.email")
    if not success or not stdout:
        print("üîß Configuration de l'email...")
        run_cmd('git config --global user.email "khafid1506@gmail.com"')
    
    # D√©marrer l'agent SSH
    print("üîß D√©marrage de l'agent SSH...")
    run_cmd("eval $(ssh-agent -s)")
    
    # Ajouter les cl√©s SSH
    ssh_dir = Path.home() / ".ssh"
    for key_file in ["id_ed25519", "id_rsa"]:
        key_path = ssh_dir / key_file
        if key_path.exists():
            print(f"üîß Ajout de la cl√© {key_file}...")
            run_cmd(f"ssh-add ~/.ssh/{key_file}")

if __name__ == "__main__":
    if diagnose_ssh():
        print("\n‚úÖ Diagnostic termin√© avec succ√®s!")
        
        choice = input("\nü§î Voulez-vous appliquer les corrections automatiques ? (o/N): ")
        if choice.lower() in ['o', 'oui', 'y', 'yes']:
            fix_common_issues()
    else:
        print("\n‚ùå Probl√®mes d√©tect√©s. Consultez les solutions ci-dessous.")
        fix_common_issues()