#!/usr/bin/env python3
"""
================================================================================
Git Repository Initialization Script for TestoJarvis Playwright Assistant
================================================================================
Modifi√© pour g√©n√©rer dynamiquement le message de commit √† l‚Äôaide d‚Äôun LLM local

D√©pendances :
- pip install langchain openai tiktoken
- Ollama install√© avec un mod√®le : `ollama run mistral`

================================================================================
"""

# TODO

# PROMPT: quels sont les controles qu'on peut mettre dans un commit push classique vers un repo Github. Par exemple, un linter de code qui bloque le push si le code n'est pas propre. 
# Merci.

# RESULTATS:
# Voici les principaux contr√¥les qu'on peut mettre en place dans un workflow commit/push vers GitHub :

# ## üîç Contr√¥les c√¥t√© local (Pre-commit hooks)

# ### **Qualit√© de code**
# - **Linters** : ESLint, Pylint, Flake8, RuboCop, TSLint
# - **Formatters** : Black, Prettier, autopep8, gofmt
# - **Analyseurs statiques** : SonarLint, Bandit (s√©curit√© Python), MyPy (types Python)

# ### **Tests et validation**
# - **Tests unitaires** : Ex√©cution automatique avant commit
# - **Tests de couverture** : Seuil minimum requis
# - **Validation de sch√©mas** : JSON, YAML, XML
# - **V√©rification des d√©pendances** : Vuln√©rabilit√©s, licences

# ### **Contr√¥les structurels**
# - **Messages de commit** : Format conventionnel (Conventional Commits)
# - **Taille des fichiers** : Bloquer les gros fichiers binaires
# - **Secrets** : D√©tection de cl√©s API, mots de passe
# - **Trailing whitespace** : Suppression des espaces en fin de ligne

# ## üõ°Ô∏è Contr√¥les c√¥t√© GitHub (GitHub Actions/Workflows)

# ### **CI/CD Pipeline**
# - **Build automatique** : Compilation, packaging
# - **Tests d'int√©gration** : Tests end-to-end
# - **Tests de performance** : Benchmarks
# - **Tests de s√©curit√©** : SAST, DAST, dependency scanning

# ### **Contr√¥les de branche**
# - **Branch protection rules** : Require PR reviews, status checks
# - **Merge restrictions** : Squash, rebase policies
# - **Required reviewers** : Code owners, √©quipes sp√©cifiques

# ## üîß Outils populaires

# ### **Pre-commit (Python)**
# ```yaml
# repos:
#   - repo: https://github.com/psf/black
#     hooks:
#       - id: black
#   - repo: https://github.com/pycqa/flake8
#     hooks:
#       - id: flake8
# ```

# ### **Husky (JavaScript)**
# ```json
# {
#   "husky": {
#     "hooks": {
#       "pre-commit": "lint-staged",
#       "pre-push": "npm test"
#     }
#   }
# }
# ```

# ### **GitHub Actions exemple**
# ```yaml
# name: Quality Check
# on: [push, pull_request]
# jobs:
#   lint:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Run linter
#         run: flake8 .
#       - name: Run tests
#         run: pytest
# ```

# ## ‚ö†Ô∏è Contr√¥les de s√©curit√© avanc√©s

# - **GitLeaks** : D√©tection de secrets dans l'historique
# - **Semgrep** : Analyse de s√©curit√© du code
# - **Dependabot** : Mise √† jour automatique des d√©pendances
# - **CodeQL** : Analyse de vuln√©rabilit√©s GitHub

# Ces contr√¥les permettent de maintenir une base de code propre, s√©curis√©e et de qualit√© avant que le code n'atteigne le d√©p√¥t principal.

# PROMPT:

# A partir du script .py Python joint, j'envisage de commit push des fichiers sources Cypress (
# .spec.js/.ts, .cy.js/.ts
# .feature + .steps.js/.ts) et Playwright (.spec.js/.ts, .test.js/.ts
# .feature + .steps.js/.ts). Ajoute un contr√¥le local de qualit√© de code dans le script joint, pour les cas Cypress et Playwright. Merci.

# RESULTAT: lancer le prompt precedent

# PROMPT: Mets √† jour le README joint avec toutes les modifications pr√©c√©dentes dans le script auto_commit_push.py


import os
import subprocess
import sys

# Langchain for AI commit message generation
# from langchain.llms import Ollama
from langchain_community.llms import Ollama
from langchain.prompts import PromptTemplate


# Repository configuration
REPO_NAME = "auto-commit-push"
USERNAME = "khafidmedheb"
REMOTE_URL = f"git@github.com:{USERNAME}/{REPO_NAME}.git"

def run_cmd(cmd, check=True, capture_output=False):
    result = subprocess.run(cmd, shell=True, check=check, text=True, capture_output=capture_output)
    return result.stdout.strip() if capture_output else None

def get_git_diff():
    """
    R√©cup√®re le diff des fichiers en staging.
    """
    try:
        return run_cmd("git diff --cached", capture_output=True)
    except subprocess.CalledProcessError:
        return ""

def generate_commit_message_with_ai(diff_text):
    """
    G√©n√®re un message de commit via un LLM local avec Langchain (ex: Ollama).
    """
    if not diff_text.strip():
        return "üîß Mise √† jour sans modification d√©tectable"

    template = PromptTemplate.from_template("""
Tu es un assistant d√©veloppeur. R√©sume les modifications ci-dessous dans un message de commit Git court, clair et utile.

Diff :
{diff}

R√®gles :
- Ligne unique
- Commence par un emoji (ex: üêõ, ‚ú®, üîß, üöÄ)
- Utilise des verbes d'action (Ajout, Correction, Suppression, Refacto, etc.)
- Pas de termes vagues comme "update"

Message :
""")

    prompt = template.format(diff=diff_text)
    llm = Ollama(model="mistral")  # ‚ö†Ô∏è n√©cessite que ollama tourne localement
    return llm.predict(prompt).strip()

def main():
    
    print("üöÄ Initialisation du d√©p√¥t Git local...")
    os.chdir(os.path.dirname(os.path.abspath(__file__)))

    if not os.path.isdir(".git"):
        run_cmd("git init")

    run_cmd("git add .")

    # G√©n√©ration du commit message
    try:
        diff = get_git_diff()
        commit_message = generate_commit_message_with_ai(diff)
        print(f"ü§ñ Message g√©n√©r√© : {commit_message}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur IA : {e}")
        commit_message = "üöÄ Commit auto ‚Äì fallback"
        print(f"üìù Message alternatif utilis√© : {commit_message}")

    try:
        escaped_message = commit_message.replace('"', '\\"')
        run_cmd(f'git commit -m "{escaped_message}"')
        print(f"‚úÖ Commit cr√©√© : {commit_message}")
    except subprocess.CalledProcessError:
        print("‚ö†Ô∏è Aucun changement √† commiter.")

    run_cmd("git branch -M main")

    try:
        run_cmd("git remote remove origin")
    except subprocess.CalledProcessError:
        pass

    run_cmd(f"git remote add origin {REMOTE_URL}")
    print(f"üîó Remote configur√© : {REMOTE_URL}")
    run_cmd("git push -u origin main")
    print(f"‚úÖ Projet pouss√© sur GitHub avec succ√®s !")

if __name__ == "__main__":
    main()
